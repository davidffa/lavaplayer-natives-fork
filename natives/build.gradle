plugins {
  id 'de.undercouch.download'
}

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'de.undercouch.download'

apply from: 'natives.gradle'

ext.opusVersion = '1.5.2'
ext.mpg123Version = '1.32.6'
ext.oggVersion = '1.3.5'
ext.vorbisVersion = '1.3.7'
ext.sampleRateVersion = '0.2.2'
ext.fdkAacVersion = '2.0.3'

task load { doLast {
  if (!file("$projectDir/samplerate/src").exists() || !file("$projectDir/samplerate/include").exists()) {
    def downloadPath = "$buildDir/tmp/libsamplerate.tar.gz"
    def unpackPath = "$buildDir/tmp"

    download {
      src "https://github.com/libsndfile/libsamplerate/archive/refs/tags/${sampleRateVersion}.tar.gz"
      dest downloadPath
    }

    copy {
      from tarTree(resources.gzip(downloadPath))
      into unpackPath
    }

    copy {
      from "$unpackPath/libsamplerate-${sampleRateVersion}/src"
      into "$projectDir/samplerate/src"
    }

    copy {
      from "$unpackPath/libsamplerate-${sampleRateVersion}/include"
      into "$projectDir/samplerate/include"
    }
  }

  if (!file("$projectDir/fdk-aac/libAACdec").exists()) {
    def downloadPath = "$buildDir/tmp/fdk-aac-v${fdkAacVersion}.zip"
    def unpackPath = "$buildDir"

    download {
      src "https://github.com/mstorsjo/fdk-aac/archive/v${fdkAacVersion}.zip"
      dest downloadPath
    }

    copy {
      from zipTree(file(downloadPath))
      into unpackPath
    }

    delete("$unpackPath/fdk-aac-$fdkAacVersion/CMakeLists.txt")

    copy {
      from "$unpackPath/fdk-aac-${fdkAacVersion}"
      into "$projectDir/fdk-aac"
    }
  }

  if (!file("$projectDir/vorbis/libogg-${oggVersion}").exists()) {
    def downloadPath = "$buildDir/tmp/temp.zip"
    def unpackPath = "$buildDir"

    download {
      src "http://downloads.xiph.org/releases/ogg/libogg-${oggVersion}.zip"
      dest downloadPath
    }

    copy {
      from zipTree(file(downloadPath))
      into "$projectDir/vorbis"
    }

    download {
      src "http://downloads.xiph.org/releases/vorbis/libvorbis-${vorbisVersion}.zip"
      dest downloadPath
    }

    copy {
      from zipTree(file(downloadPath))
      into "$projectDir/vorbis"
    }
  }

  if (!file("$projectDir/opus/opus-${opusVersion}").exists()) {
    def downloadPath = "$buildDir/tmp/temp.tar.gz"
    def unpackPath = "$buildDir"

    download {
      src "http://downloads.xiph.org/releases/opus/opus-${opusVersion}.tar.gz"
      dest downloadPath
    }

    copy {
      from tarTree(file(downloadPath))
      into "$projectDir/opus"
    }
  }

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    def arch = System.getProperty("os.arch")
    def bits = arch == "amd64" ? "64" : "32"
    def suffix = arch == "amd64" ? "-64" : ""

    if (!file("$projectDir/mp3/mpg123-$mpg123Version-x86${suffix}").exists()) {
      def downloadPath = "$buildDir/tmp/temp.zip"

      download {
        src "https://www.mpg123.de/download/win${bits}/${mpg123Version}/mpg123-${mpg123Version}-x86${suffix}.zip"
        dest downloadPath
      }

      copy {
        from zipTree(file(downloadPath))
        into "$projectDir/mp3"
      }
    }
  } else {
    if (!file("$projectDir/mp3/mpg123-$mpg123Version").exists()) {
      def downloadPath = "$buildDir/tmp/temp.tar.bz2"
      def unpackPath = "$buildDir"

      download {
        src "https://www.mpg123.de/download/mpg123-${mpg123Version}.tar.bz2"
        dest downloadPath
      }

      copy {
        from tarTree(file(downloadPath))
        into "$projectDir/mp3"
      }
    }
  }
}}

def buildOpusOnWindows(force) {
  def base = "$projectDir/libs/64"
  def buildDir = "$projectDir/opus/opus-$opusVersion/build"
  def libs = ['opus']
  def present = libs.every { file("${base}/${it}.lib").exists() }

  if (force || !present) {
    file(base).deleteDir()
    file(base).mkdirs()
    file(buildDir).mkdirs()

    def process = ["cmake", "..", "-DCMAKE_BUILD_TYPE=Release", "-A", "x64"]
      .execute(null as String[], file(buildDir))

    waitForAndCheckSuccess(process, "Opus cmake config")

    process = ["cmake", "--build", ".", "--config", "Release"]
      .execute(null as String[], file(buildDir))

    waitForAndCheckSuccess(process, "Opus cmake build")

    libs.each {
      assert file("$buildDir/Release/${it}.lib").renameTo("${base}/${it}.lib")
    }
  }
}

def prepareMpg123OnWindows(force, arch) {
  def base = "$projectDir/libs/64"
  def present = file("$projectDir/libs/64/mpg123.lib").exists()

  if (force || !present) {
    file(base).mkdirs()

    def process = ["lib", "/def:libmpg123-0.def", arch == "x86-64" ? "/machine:x64" : "", "/out:mpg123.lib"]
            .execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}-${arch}"))

    process.waitForProcessOutput(System.out as Appendable, System.err)

    assert file("$projectDir/mp3/mpg123-${mpg123Version}-${arch}/mpg123.lib").renameTo("$base/mpg123.lib")
  }
}

def waitForAndCheckSuccess(process, name) {
  process.waitForProcessOutput(System.out as Appendable, System.err)

  if (process.exitValue() != 0) {
    throw new IllegalStateException("${name} failed.")
  }
}

def buildOpusOnUnix(force, arch) {
  def present = file("${projectDir}/libs/64/libopus.a").exists()

  if (force || !present) {
    replaceAutotoolsVersion("$projectDir/opus/opus-$opusVersion", "1.16.5")

    def flags = "-fPIC -O3 -fdata-sections -ffunction-sections"
    def process = ["./configure", "--enable-static", "--with-pic", "CFLAGS=${flags}", "CXXFLAGS=${flags}", "LDFLAGS=${flags}"].
        execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))

    waitForAndCheckSuccess(process, "Opus ./configure")

    process = ["make", "clean"].execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))
    waitForAndCheckSuccess(process, "Opus make clean")

    process = ["make"].execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))
    waitForAndCheckSuccess(process, "Opus make")

    copy {
      from "$projectDir/opus/opus-${opusVersion}/.libs/libopus.a"
      into "$projectDir/libs/64"
    }
  }
}

def extractVersionPrefix(fullVersion, partCount) {
  def parts = fullVersion.split('\\.').toList()
  return parts.subList(0, Math.min(partCount, parts.size())).join('.')
}

def replaceAutotoolsVersion(directory, originalVersion) {
  def localVersion = (['automake', '--version'].execute().text =~ /\(GNU automake\) ([0-9.]+)/)[0][1]
  def localMajorVersion = extractVersionPrefix(localVersion, 2)
  def originalMajorVersion = extractVersionPrefix(originalVersion, 2)

  [file("$directory/aclocal.m4"), file("$directory/configure")].each {
    it.text = it.text.replace("am__api_version='$originalMajorVersion'", "am__api_version='$localMajorVersion'").replace(originalVersion, localVersion)
  }
}

def buildMpg123OnUnix(force, arch) {
  def present = file("${projectDir}/libs/64/libmpg123.a").exists()

  if (force || !present) {
    replaceAutotoolsVersion("$projectDir/mp3/mpg123-${mpg123Version}", '1.16.5')

    def flags = "-fPIC -O3 -fdata-sections -ffunction-sections"
    def process = ['./configure', '--enable-static', '--with-cpu=' + arch, '--with-pic', "CFLAGS=$flags", "CXXFLAGS=$flags"].
        execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))

    waitForAndCheckSuccess(process, "Mpg123 ./configure")

    process = ["make", "clean"].execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))
    waitForAndCheckSuccess(process, "make clean")

    process = ["make"].execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))
    waitForAndCheckSuccess(process, "make src/libmpg123/libmpg123.la")

    copy {
      from "$projectDir/mp3/mpg123-${mpg123Version}/src/libmpg123/.libs/libmpg123.a"
      into "$projectDir/libs/64"
    }
  }
}

def prepareOggOnUnix(force) {
  def configured = file("$projectDir/vorbis/libogg-${oggVersion}/include/ogg/config_types.h").exists()

  if (force || !configured) {
    def process = ["./configure", "--enable-static", "--with-pic"].
        execute(null as String[], file("$projectDir/vorbis/libogg-${oggVersion}"))

    process.waitForProcessOutput(System.out as Appendable, System.err)
  }
}

def prepareBuilds(force) {
  def arch = System.getProperty("os.arch")
  if (arch == 'amd64') arch = 'x86-64'

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    buildOpusOnWindows(force)
    prepareMpg123OnWindows(force, arch)
  } else {
    prepareOggOnUnix(force)
    buildOpusOnUnix(force, arch)
    buildMpg123OnUnix(force, arch)
  }
}

task compileNatives() { }
task checkNatives() { }

def buildTaskConfig = [
    buildBase: buildDir,
    projectBase: projectDir,
    deployBase: project(':natives-publish').projectDir,
    setupDependency: tasks.load,
    setupDoFirst: { config -> prepareBuilds(false) },
    compileTask: tasks.compileNatives,
    checkTask: tasks.checkNatives,
    name: 'connector'
]

createBuildTask(tasks, buildTaskConfig)
